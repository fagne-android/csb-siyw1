{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","components/Spinner.js","features/users/usersSlice.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/api/apiSlice.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationsList.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","status","url","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","builder","addCase","fulfilled","notificationsWithMetadata","payload","map","isNew","upsertMany","actions","getSelectors","notifications","selectAll","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","length","className","to","onClick","Spinner","text","size","header","style","height","width","usersAdapter","fetchUsers","usersSlice","setAll","users","selectAllUsers","selectUserById","selectById","PostAuthor","userId","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","title","postsAdapter","error","fetchPosts","addNewPost","initialPost","postsSlice","reactionAdded","postId","reaction","existingPost","reactions","postUpdated","id","content","pending","rejected","addOne","postAdded","posts","selectAllPosts","selectPostById","selectPostsByUser","selectIds","createSelector","user","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","emoji","type","apiSlice","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","getPosts","query","providesTags","getPost","mutation","invalidatesTags","useGetPostsQuery","useGetPostQuery","useAddNewPostMutation","PostExcerpt","substring","PostsList","isLoading","isSuccess","isError","sortedPosts","useMemo","slice","sort","toString","AddPostForm","useState","setTitle","setContent","setUserId","canSave","every","Boolean","onSavePostClicked","unwrap","console","usersOptions","value","spinner","htmlFor","placeholder","onChange","e","target","display","alignItems","disabled","EditPostForm","match","params","history","useHistory","push","SinglePostPage","isFetching","UsersList","renderedUsers","UserPage","postTitles","NotificationsList","useLayoutEffect","renderedNotifications","find","notificationClassname","classnames","new","App","seedDate","exact","path","render","Fragment","component","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","middleware","getDefaultMiddleware","concat","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","updatedPost","update","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e8ec641.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      }\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\n\r\nimport { client } from \"../../api/client\";\r\n\r\nconst notificationsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n});\r\n\r\nexport const fetchNotifications = createAsyncThunk(\r\n  \"notifications/fetchNotifications\",\r\n  async (_, { getState }) => {\r\n    const allNotifications = selectAllNotifications(getState());\r\n    const [latestNotification] = allNotifications;\r\n    const latestTimestamp = latestNotification ? latestNotification.date : \"\";\r\n    const response = await client.get(\r\n      `/fakeApi/notifications?since=${latestTimestamp}`\r\n    );\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst notificationsSlice = createSlice({\r\n  name: \"notifications\",\r\n  initialState: notificationsAdapter.getInitialState(),\r\n  reducers: {\r\n    allNotificationsRead(state, action) {\r\n      Object.values(state.entities).forEach((notification) => {\r\n        notification.read = true;\r\n      });\r\n    }\r\n  },\r\n  extraReducers(builder) {\r\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\r\n      // Add client-side metadata for tracking new notifications\r\n      const notificationsWithMetadata = action.payload.map((notification) => ({\r\n        ...notification,\r\n        read: false,\r\n        isNew: true\r\n      }));\r\n\r\n      Object.values(state.entities).forEach((notification) => {\r\n        // Any notifications we've read are no longer new\r\n        notification.isNew = !notification.read;\r\n      });\r\n\r\n      notificationsAdapter.upsertMany(state, notificationsWithMetadata);\r\n    });\r\n  }\r\n});\r\n\r\nexport const { allNotificationsRead } = notificationsSlice.actions;\r\n\r\nexport default notificationsSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllNotifications\r\n} = notificationsAdapter.getSelectors((state) => state.notifications);\r\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport {\n  fetchNotifications,\n  selectAllNotifications\n} from \"../features/notifications/notificationsSlice\";\n\nexport const Navbar = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector(selectAllNotifications);\n  const numUnreadNotifications = notifications.filter((n) => !n.read).length;\n\n  const fetchNewNotifications = () => {\n    dispatch(fetchNotifications());\n  };\n\n  let unreadNotificationsBadge;\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    );\n  }\n\n  return (\n    <nav>\n      <section>\n        <h1>Fagne - RTK Query Basics</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Postagens</Link>\n            <Link to=\"/users\">Usuários</Link>\n            <Link to=\"/notifications\">\n              Notificações {unreadNotificationsBadge}\n            </Link>\n          </div>\n\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Recarregar Notificações da API\n          </button>\n        </div>\n      </section>\n    </nav>\n  );\n};\n","import React from \"react\";\n\nexport const Spinner = ({ text = \"\", size = \"5em\" }) => {\n  const header = text ? <h4>{text}</h4> : null;\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  );\n};\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst usersAdapter = createEntityAdapter();\r\n\r\nconst initialState = usersAdapter.getInitialState();\r\n\r\nexport const fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\r\n  const response = await client.get(\"/fakeApi/users\");\r\n  return response.data;\r\n});\r\n\r\nconst usersSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers(builder) {\r\n    builder.addCase(fetchUsers.fulfilled, usersAdapter.setAll);\r\n  }\r\n});\r\n\r\nexport default usersSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllUsers,\r\n  selectById: selectUserById\r\n} = usersAdapter.getSelectors((state) => state.users);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { selectUserById } from \"../users/usersSlice\";\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) => selectUserById(state, userId));\r\n\r\n  return <span>by {author ? author.name : \"Unknown author\"}</span>;\r\n};\r\n","import React from \"react\";\r\nimport { parseISO, formatDistanceToNow } from \"date-fns\";\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = \"\";\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n};\r\n","import {\r\n  createSlice,\r\n  createAsyncThunk,\r\n  createSelector,\r\n  createEntityAdapter\r\n} from \"@reduxjs/toolkit\";\r\nimport { client } from \"../../api/client\";\r\n\r\nconst postsAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\r\n});\r\n\r\nconst initialState = postsAdapter.getInitialState({\r\n  status: \"idle\",\r\n  error: null\r\n});\r\n\r\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\r\n  const response = await client.get(\"/fakeApi/posts\");\r\n  return response.data;\r\n});\r\n\r\nexport const addNewPost = createAsyncThunk(\r\n  \"posts/addNewPost\",\r\n  async (initialPost) => {\r\n    const response = await client.post(\"/fakeApi/posts\", initialPost);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload;\r\n      const existingPost = state.entities[postId];\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++;\r\n      }\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload;\r\n      const existingPost = state.entities[id];\r\n      if (existingPost) {\r\n        existingPost.title = title;\r\n        existingPost.content = content;\r\n      }\r\n    }\r\n  },\r\n  extraReducers(builder) {\r\n    builder\r\n      .addCase(fetchPosts.pending, (state, action) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchPosts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        // Add any fetched posts to the array\r\n        postsAdapter.upsertMany(state, action.payload);\r\n      })\r\n      .addCase(fetchPosts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne);\r\n  }\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;\r\n\r\nexport const {\r\n  selectAll: selectAllPosts,\r\n  selectById: selectPostById,\r\n  selectIds: selectPostIds\r\n} = postsAdapter.getSelectors((state) => state.posts);\r\n\r\nexport const selectPostsByUser = createSelector(\r\n  [selectAllPosts, (state, userId) => userId],\r\n  (posts, userId) => posts.filter((post) => post.user === userId)\r\n);\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { reactionAdded } from \"./postsSlice\";\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: \"👍\",\r\n  hooray: \"🎉\",\r\n  heart: \"❤️\",\r\n  rocket: \"🚀\",\r\n  eyes: \"👀\"\r\n};\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div>{reactionButtons}</div>;\r\n};\r\n","// Import the RTK Query methods from the React-specific entry point\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\n// Define our single API slice object\r\nexport const apiSlice = createApi({\r\n  // The cache reducer expects to be added at `state.api` (already default - this is optional)\r\n  reducerPath: \"api\",\r\n  // All of our requests will have URLs starting with '/fakeApi'\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"/fakeApi\" }),\r\n  //Declaring an array of string tag names for data types such as 'Post'\r\n  tagTypes: [\"Post\"],\r\n  // The \"endpoints\" represent operations and requests for this server\r\n  endpoints: (builder) => ({\r\n    // The `getPosts` endpoint is a \"query\" operation that returns data\r\n    getPosts: builder.query({\r\n      // The URL for the request is '/fakeApi/posts'\r\n      query: () => \"/posts\",\r\n      //Listing a set of tags describing the data in that query\r\n      providesTags: [\"Post\"]\r\n    }),\r\n    // For get post by Id\r\n    getPost: builder.query({\r\n      query: (postId) => `/posts/${postId}`\r\n    }),\r\n    // This endpoint is a mutations for add new post\r\n    addNewPost: builder.mutation({\r\n      query: (initialPost) => ({\r\n        url: \"/posts\",\r\n        method: \"POST\",\r\n        // Include the entire post object as the body of the request\r\n        body: initialPost\r\n      }),\r\n      //Listing a set of tags that are invalidated every time that mutation runs\r\n      invalidatesTags: [\"Post\"]\r\n    })\r\n  })\r\n});\r\n\r\n// Export the auto-generated hook for the `getPosts` query endpoint\r\nexport const {\r\n  useGetPostsQuery,\r\n  useGetPostQuery,\r\n  useAddNewPostMutation\r\n} = apiSlice;\r\n","import React, { useMemo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Spinner } from \"../../components/Spinner\";\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\n\r\nimport { useGetPostsQuery } from \"../api/apiSlice\";\r\n\r\nlet PostExcerpt = ({ post }) => {\r\n  return (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <div>\r\n        <PostAuthor userId={post.user} />\r\n        <TimeAgo timestamp={post.date} />\r\n      </div>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n      <ReactionButtons post={post} />\r\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n        View Post\r\n      </Link>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport const PostsList = () => {\r\n  const {\r\n    data: posts = [],\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error\r\n  } = useGetPostsQuery();\r\n\r\n  const sortedPosts = useMemo(() => {\r\n    const sortedPosts = posts.slice();\r\n    // Sort posts in descending chronological order\r\n    sortedPosts.sort((a, b) => b.date.localeCompare(a.date));\r\n    return sortedPosts;\r\n  }, [posts]);\r\n\r\n  let content;\r\n\r\n  if (isLoading) {\r\n    content = <Spinner text=\"Buscando na API...\" />;\r\n  } else if (isSuccess) {\r\n    content = sortedPosts.map((post) => (\r\n      <PostExcerpt key={post.id} post={post} />\r\n    ));\r\n  } else if (isError) {\r\n    content = <div>Erro ao buscar na API: {error.toString()}</div>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Postagens</h2>\r\n      {content}\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { Spinner } from \"../../components/Spinner\";\r\nimport { useAddNewPostMutation } from \"../api/apiSlice\";\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n\r\n  const [addNewPost, { isLoading }] = useAddNewPostMutation();\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n  const onAuthorChanged = (e) => setUserId(e.target.value);\r\n\r\n  const canSave = [title, content, userId].every(Boolean) && !isLoading;\r\n\r\n  const onSavePostClicked = async () => {\r\n    if (canSave) {\r\n      try {\r\n        await addNewPost({ title, content, user: userId }).unwrap();\r\n        setTitle(\"\");\r\n        setContent(\"\");\r\n        setUserId(\"\");\r\n      } catch (err) {\r\n        console.error(\"Failed to save the post: \", err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const usersOptions = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ));\r\n\r\n  const spinner = isLoading ? <Spinner size=\"30px\" /> : null;\r\n\r\n  return (\r\n    <section>\r\n      <h2>Adicionar Nova Postagem</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Título:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Autor:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {usersOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Conteúdo:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n            Salvar Postagem\r\n          </button>\r\n          {spinner}\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { postUpdated, selectPostById } from \"./postsSlice\";\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector((state) => selectPostById(state, postId));\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value);\r\n  const onContentChanged = (e) => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }));\r\n      history.push(`/posts/${postId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Editar Postagem</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Salvar Postagem\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Spinner } from \"../../components/Spinner\";\r\nimport { useGetPostQuery } from \"../api/apiSlice\";\r\n\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const { data: post, isFetching, isSuccess } = useGetPostQuery(postId);\r\n\r\n  let content;\r\n\r\n  if (isFetching) {\r\n    content = <Spinner text=\"Carregando do Store...\" />;\r\n  } else if (isSuccess) {\r\n    content = (\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Editar Postagem\r\n        </Link>\r\n      </article>\r\n    );\r\n  }\r\n\r\n  return <section>{content}</section>;\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { selectAllUsers } from \"./usersSlice\";\r\n\r\nexport const UsersList = () => {\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  const renderedUsers = users.map((user) => (\r\n    <li key={user.id}>\r\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Usuários</h2>\r\n\r\n      <ul>{renderedUsers}</ul>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { selectUserById } from \"../users/usersSlice\";\r\nimport { selectPostsByUser } from \"../posts/postsSlice\";\r\n\r\nexport const UserPage = ({ match }) => {\r\n  const { userId } = match.params;\r\n\r\n  const user = useSelector((state) => selectUserById(state, userId));\r\n\r\n  const postsForUser = useSelector((state) => selectPostsByUser(state, userId));\r\n\r\n  const postTitles = postsForUser.map((post) => (\r\n    <li key={post.id}>\r\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>{user.name}</h2>\r\n\r\n      <ul>{postTitles}</ul>\r\n    </section>\r\n  );\r\n};\r\n","import React, { useLayoutEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { formatDistanceToNow, parseISO } from \"date-fns\";\r\nimport classnames from \"classnames\";\r\n\r\nimport { selectAllUsers } from \"../users/usersSlice\";\r\n\r\nimport {\r\n  selectAllNotifications,\r\n  allNotificationsRead\r\n} from \"./notificationsSlice\";\r\n\r\nexport const NotificationsList = () => {\r\n  const dispatch = useDispatch();\r\n  const notifications = useSelector(selectAllNotifications);\r\n  const users = useSelector(selectAllUsers);\r\n\r\n  useLayoutEffect(() => {\r\n    dispatch(allNotificationsRead());\r\n  });\r\n\r\n  const renderedNotifications = notifications.map((notification) => {\r\n    const date = parseISO(notification.date);\r\n    const timeAgo = formatDistanceToNow(date);\r\n    const user = users.find((user) => user.id === notification.user) || {\r\n      name: \"Unknown User\"\r\n    };\r\n\r\n    const notificationClassname = classnames(\"notification\", {\r\n      new: notification.isNew\r\n    });\r\n\r\n    return (\r\n      <div key={notification.id} className={notificationClassname}>\r\n        <div>\r\n          <b>{user.name}</b> {notification.message}\r\n        </div>\r\n        <div title={notification.date}>\r\n          <i>{timeAgo} ago</i>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"notificationsList\">\r\n      <h2>Notificações</h2>\r\n      {renderedNotifications}\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport { Navbar } from \"./app/Navbar\";\n\nimport { PostsList } from \"./features/posts/PostsList\";\nimport { AddPostForm } from \"./features/posts/AddPostForm\";\nimport { EditPostForm } from \"./features/posts/EditPostForm\";\nimport { SinglePostPage } from \"./features/posts/SinglePostPage\";\nimport { UsersList } from \"./features/users/UsersList\";\nimport { UserPage } from \"./features/users/UserPage\";\nimport { NotificationsList } from \"./features/notifications/NotificationsList\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <PostsList />\n                <AddPostForm />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { rest, setupWorker } from \"msw\";\nimport { factory, oneOf, manyOf, primaryKey } from \"@mswjs/data\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport faker from \"faker\";\nimport seedrandom from \"seedrandom\";\nimport { Server as MockSocketServer } from \"mock-socket\";\nimport { setRandom } from \"txtgen\";\n\nimport { parseISO } from \"date-fns\";\n\nconst NUM_USERS = 3;\nconst POSTS_PER_USER = 3;\nconst RECENT_NOTIFICATIONS_DAYS = 7;\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 10;\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true;\n\nlet rng = seedrandom();\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem(\"randomTimestampSeed\");\n  let seedDate;\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString);\n  } else {\n    seedDate = new Date();\n    randomSeedString = seedDate.toISOString();\n    localStorage.setItem(\"randomTimestampSeed\", randomSeedString);\n  }\n\n  rng = seedrandom(randomSeedString);\n  setRandom(rng);\n  faker.seed(seedDate.getTime());\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(rng() * (max - min + 1)) + min;\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1);\n  return array[index];\n};\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf(\"post\")\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf(\"reaction\"),\n    comments: manyOf(\"comment\"),\n    user: oneOf(\"user\")\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf(\"post\")\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf(\"post\")\n  }\n});\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName();\n  const lastName = faker.name.lastName();\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName()\n  };\n};\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create()\n  };\n};\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData());\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author);\n    db.post.create(newPost);\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id\n});\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get(\"/fakeApi/posts\", function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts));\n  }),\n  rest.post(\"/fakeApi/posts\", function (req, res, ctx) {\n    const data = req.body;\n\n    if (data.content === \"error\") {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json(\"Server error saving this post!\")\n      );\n    }\n\n    data.date = new Date().toISOString();\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } });\n    data.user = user;\n    data.reactions = db.reaction.create();\n\n    const post = db.post.create(data);\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.get(\"/fakeApi/posts/:postId\", function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } }\n    });\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)));\n  }),\n  rest.patch(\"/fakeApi/posts/:postId\", (req, res, ctx) => {\n    const { id, ...data } = req.body;\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n\n  rest.get(\"/fakeApi/posts/:postId/comments\", (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } }\n    });\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    );\n  }),\n\n  rest.post(\"/fakeApi/posts/:postId/reactions\", (req, res, ctx) => {\n    const postId = req.params.postId;\n    const reaction = req.body.reaction;\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } }\n    });\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1)\n        }\n      }\n    });\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    );\n  }),\n  rest.get(\"/fakeApi/notifications\", (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5);\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    );\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications));\n  }),\n  rest.get(\"/fakeApi/users\", (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()));\n  })\n];\n\nexport const worker = setupWorker(...handlers);\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer(\"ws://localhost\");\n\nlet currentSocket;\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj));\n};\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5);\n\n  const notifications = generateRandomNotifications(\n    since,\n    numNotifications,\n    db\n  );\n\n  sendMessage(socket, { type: \"notifications\", payload: notifications });\n};\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since);\n};\n\nsocketServer.on(\"connection\", (socket) => {\n  currentSocket = socket;\n\n  socket.on(\"message\", (data) => {\n    const message = JSON.parse(data);\n\n    switch (message.type) {\n      case \"notifications\": {\n        const since = message.payload;\n        sendRandomNotifications(socket, since);\n        break;\n      }\n      default:\n        break;\n    }\n  });\n});\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  \"poked you\",\n  \"says hi!\",\n  `is glad we're friends`,\n  \"sent you a gift\"\n];\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date();\n  let pastDate;\n\n  if (since) {\n    pastDate = parseISO(since);\n  } else {\n    pastDate = new Date(now.valueOf());\n    pastDate.setMinutes(pastDate.getMinutes() - 15);\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll());\n    const template = randomFromArray(notificationTemplates);\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id\n    };\n  });\n\n  return notifications;\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport postsReducer from \"../features/posts/postsSlice\";\nimport usersReducer from \"../features/users/usersSlice\";\nimport notificationsReducer from \"../features/notifications/notificationsSlice\";\nimport { apiSlice } from \"../features/api/apiSlice\";\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n    [apiSlice.reducerPath]: apiSlice.reducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(apiSlice.middleware)\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nimport { worker } from \"./api/server\";\n\nimport { fetchUsers } from \"./features/users/usersSlice\";\n\n// Start our mock API server\nworker.start({ onUnhandledRequest: \"bypass\" });\n\nstore.dispatch(fetchUsers());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}